#!/venv/MCGTools/bin/python3

import shutil, os, yaml, sys, time
import MCGTools as mt

output = mt.output #Lets us call output without "mt." at the beginning

output('#######################################################################')
output('#   PTCopy                                                            #')
output('#   MCG Jazz SMB File Retrieval Tool                                  #')
output('#                                                                     #')
output('#   Written by Connor Ehrgood 9/23/2022                               #')
output('#   cehrgood@manchesterbidwell.org, connor@ebcom.co, (724) 825-7313   #')
output('#######################################################################')
output('Initializing...')

if len(sys.argv) < 3: #Checks to make sure the correct number of arguments is provided
    output('ERROR: A name and config file file MUST be provided! Usage: ptcopy <NAME> <CONFIG FILE>')
    exit(1)
elif len(sys.argv) > 3:
    output('ERROR: Too many arguments provided! Usage: ptcopy <NAME> <CONFIG FILE>')
    exit(1)

name = sys.argv[1] #Extracts the name argument provided in the terminal
config_file = sys.argv[2] #Extracts the config file argument provided in the terminal
directory = os.path.join(os.getcwd(), name) #Generates the directory path based upon the current working directory and the name provided



with open(config_file, 'r') as config_open: #Opens the config file provided
    output('Loading Config...')
    config = yaml.safe_load(config_open) #Saves the contents of the config file as a list

if 'ptcopy_working_directory' in config: # ... or if a directory was specified in the config file...
    directory = config['ptcopy_working_directory'] # ... copy the tree to that directory

elif 'working_directory' in config:
    directory = config['working_directory']

else:
    directory = os.path.join(os.getcwd()) #... Otherwise, generate the directory path based upon the current working directory

root_dir = 'PTCopy'
if config['ptcopy_directory_name']: # Checks wheter a directory name was specified...
    root_dir = config['ptcopy_directory_name'] # If so, name the directory that.

old_dir = config['ptcopy_old_directory']
new_dir = os.path.join(directory, name, root_dir)

output(f'Copying to {new_dir} from {old_dir}. This could take a while...')

shutil.copytree(old_dir, new_dir)

output('Waiting for corruption (for testing)...')
time.sleep(20)

for new_file in mt.get_files_list(new_dir):

    old_file = new_file.replace(new_dir, old_dir)
    output(f'Old File: {old_file} New File: {new_file}')

    old_name = os.path.basename(new_file)
    path_only = os.path.dirname(new_file)
    new_name = f'{name}_{old_name}'
    new_path = os.path.join(path_only, new_name)

    os.rename(new_file, new_path)

    new_file = new_path

    output(f'{new_file} - Generating MD5 hash...')    
    new_file_hash = mt.megamd5(new_file)
    output('Verifying...')
    output(f'{new_file} - File hash:{new_file_hash}')
    old_file_hash = mt.megamd5(old_file, make_file=False)
    output(f'{new_file} - Verify hash:{new_file_hash}')

    while new_file_hash != old_file_hash:
        output(f'{new_file} - File issue detected. Retrying.')

        file_base = os.path.splitext(new_file)[0]
        os.remove(f'{file_base}.md5')
        os.remove(new_file)

        shutil.copy2(old_file, new_file)

        new_file_hash = mt.megamd5(new_file)
        output(new_file_hash)
        old_file_hash = mt.megamd5(old_file, make_file=False)
        output(old_file_hash)

    output(f'{new_file} - File integrity verified. Finishing.')

print('\x1b[6;30;42m' + 'All Done!' + '\x1b[0m')