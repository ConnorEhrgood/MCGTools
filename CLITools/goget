#!/bin/python

import requests, os, sys

def output(data, end = '\n'): #Function to print data to console ONLY if process is in the foreground
    if os.getpgrp() == os.tcgetpgrp(sys.stdout.fileno()): #Checks wheter this process is the process in the foreground of the terminal
        print(data, end = end)

if len(sys.argv) < 3:
    output('ERROR: An http address and output name MUST be provided! Usage: goget <ADDRESS> <OUTPUT NAME>')
    exit(1)
elif len(sys.argv) > 3:
    output('ERROR: Too many arguments provided! Usage: goget <ADDRESS> <OUTPUT NAME>')
    exit(1)


addr = sys.argv[1]
output_file = sys.argv[2]

head = requests.head(addr)
file_type = head.headers['content-type'] #Gets file type and stores as string
file_size = int(head.headers['content-length']) #Gets file size (in bytes) and stores as int
output(f'Downloading from {addr} as {output_file}')
output(f'File type: {file_type}  File Size: {file_size}')

chunk_count = 0 #Counts how many chunks have been downloaded to calculate progress
with requests.get(addr, stream=True) as r: #Gets in streaming mode to prevent entire file being copied to RAM
    r.raise_for_status() #Outputs debugging data

    with open(output_file, 'wb') as f: #Opens output file to begin copying data to it
        for chunk in r.iter_content(chunk_size=8192): #Copies data chunk by chunk
            f.write(chunk)
            chunk_count += 1 #Increments chunck count
            prog = int(((chunk_count * 8192) / file_size)*100) #Calculates progress percentage
            output(f'{prog}% Complete.', end = '\r') #Prints progress percentage

output("Download complete!")